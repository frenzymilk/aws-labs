name: lab-001

on: 
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: Choose the action to perform
        options:
          - deploy
          - destroy

      env:
          description: "Environment"
          required: true 
          default: "dev"

env: 
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: "us-east-1"
  TF_VAR_my_public_ip: ${{ secrets.MY_IP }}
  TF_VAR_ec2_ssh_key: ${{ secrets.AWS_KEY_NAME }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}

permissions:
  contents: read

jobs: 
  deploy:
    name: deploy
    if: ${{ github.event.inputs.action == 'deploy'}}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: "./terraform_labs_aws/lab-001"


      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: "./terraform_labs_aws/lab-001"

        
      - name: Terraform Validate
        id: validate
        run: terraform validate 
        working-directory: "./terraform_labs_aws/lab-001"


      - name: Terraform Plan
        id: plan
        run: terraform plan 
        continue-on-error: false
        working-directory: "./terraform_labs_aws/lab-001"


      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        working-directory: "./terraform_labs_aws/lab-001"



      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        id: apply
        working-directory: "./terraform_labs_aws/lab-001"


      - name: AWS Plan Copy
        if: steps.apply.outcome == 'success'
        run: aws s3 cp terraform.tfstate ${{env.S3_BUCKET}}/${{ github.event.inputs.env }}-001.tfstate
        id: copy
        working-directory: "./terraform_labs_aws/lab-001"



  destroy:
    name: destroy
    if: ${{ github.event.inputs.action == 'destroy' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: AWS Plan Copy
        run: aws s3 cp ${{env.S3_BUCKET}}/${{ github.event.inputs.env }}-001.tfstate terraform.tfstate
        id: copy
        working-directory: "./terraform_labs_aws/lab-001"

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: "./terraform_labs_aws/lab-001"
  
      - name: Destroy resource jobs
        id: destroy
        run: terraform destroy -auto-approve 
        working-directory: "./terraform_labs_aws/lab-001"

      - name: Delete plan file
        if: steps.destroy.outcome == 'success'
        run: aws s3 rm ${{env.S3_BUCKET}}/${{ github.event.inputs.env }}-001.tfstate 
        working-directory: "./terraform_labs_aws/lab-001"